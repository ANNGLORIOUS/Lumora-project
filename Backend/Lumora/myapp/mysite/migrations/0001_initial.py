# Generated by Django 4.2.23 on 2025-07-31 07:57

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(help_text="User's email address, used as username", max_length=254, unique=True)),
                ('first_name', models.CharField(help_text="User's first name", max_length=30)),
                ('last_name', models.CharField(help_text="User's last name", max_length=30)),
                ('is_verified', models.BooleanField(default=False, help_text='User has verified their email')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When user account was created')),
                ('updated_at', models.DateTimeField(auto_now_add=True, help_text='When user account was last created')),
                ('subdomain', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Tenant',
                'verbose_name_plural': 'Tenants',
                'db_table': 'tenants_tenant',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Tenant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the organization/workspace', max_length=100)),
                ('subdomain', models.CharField(help_text='unique subdomain for tenant', max_length=50, unique=True)),
                ('is_active', models.BooleanField(default=True, help_text='whether this tenant is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('owner', models.ForeignKey(help_text='User who owns this tenant', on_delete=django.db.models.deletion.CASCADE, related_name='owned_tenants', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TenantMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('owner', 'Owner'), ('admin', 'Administrator'), ('member', 'Member')], default='member', help_text="User's role in this tenant", max_length=10)),
                ('joined_at', models.DateTimeField(auto_now_add=True, help_text='when user joined this tenant')),
                ('tenant', models.ForeignKey(help_text='tenant the user belongs to', on_delete=django.db.models.deletion.CASCADE, to='mysite.tenant')),
                ('user', models.ForeignKey(help_text='User who is a member of the tenant', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Tenant Membership',
                'verbose_name_plural': 'Tenant Memberships',
                'db_table': 'tenants_membership',
                'indexes': [models.Index(fields=['user', 'tenant'], name='tenants_mem_user_id_f01927_idx')],
                'unique_together': {('user', 'tenant')},
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['subdomain'], name='tenants_ten_subdoma_6c6a7a_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_active'], name='tenants_ten_is_acti_8f654a_idx'),
        ),
    ]
